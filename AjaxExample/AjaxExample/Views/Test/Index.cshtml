@model  AjaxExample.Models.TestModel

@{
    ViewBag.Title = "AjaxRawJs";
}

<div id="ajaxSuccess" class="alert alert-success alert-dismissable">
    @* will be overide by successMessage if not null*@
    <strong>Success !</strong>
</div>

<div id="ajaxFailure" class="alert alert-danger alert-dismissable">
    @* will be override by failureMessage if not null *@
    <strong>Failure !</strong>
</div>



<div id="scores">
</div>

<hr/>
<h2>1)</h2>
<input type="button" value="Get scores using XMLHttpRequest" onclick="getScores()" />

<hr />

<h2>2)</h2>
<form id="submitForm" method="post" action="/Test/AjaxRawJsInForm" onsubmit="submitFormAjax(event, 'scores')">
    <label for="idScoresNum">Number of scores</label>
    <input type="number" id="idScoresNum" min="0" step="1" name="ScoresNum"/>
    <div>
        <input type="submit" value="Get scores using form & submitFormAjax" />
    </div>
</form>

<hr />

<h2>3)</h2>
@using (Html.BeginForm("AjaxRawJsInForm", "Test", FormMethod.Post,
                new { @class = "form-horizontal",  role = "form",
                    onsubmit = "submitFormAjax(event,'scores','loading','ajaxSuccess','ajaxFailure','success','failure')"
                }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(m => m.ScoresNum, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.ScoresNum, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.ScoresNum, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="Get scores using Html.BeginForm & submitFormAjax" />
        </div>
    </div>
}

<div id="loading" style="display:none;">
    Loading ...
</div>

<h2>4)</h2>
@using (Ajax.BeginForm("AjaxRawJsInForm",   // -- action 
                        "Test",             // -- controller
                        null,               // -- route value
                        new AjaxOptions
                        {
                            HttpMethod = "Post",
                            InsertionMode = InsertionMode.InsertAfter,
                            UpdateTargetId = "scores" ,
                            Confirm = "Do you confirm this request ?",
                            LoadingElementId = "loading" ,
                            OnBegin = "ajaxBegin" ,
                            OnComplete = "ajaxComplete"
                        }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(m => m.ScoresNum, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.ScoresNum, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.ScoresNum, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="Get scores using Ajax.BeginForm" />
        </div>
    </div>
}


@section styles
{
    <style>
        
        #ajaxSuccess {
            display: none;
        }

        #ajaxFailure
        {
            display: none;
        }

    </style>
}

@section scripts
{
    <script>

        function ajaxBegin() {
            alert("Begin");
        }

        function ajaxComplete() {
            alert("Complete");
        }

        function submitFormAjax(e, addAfterThisId, loaderId,
            successId, failureId, successMessage, failureMessage) {

                var form = e.target, xmlHttp = new XMLHttpRequest(),
                    idJQueryAfter = "#" + addAfterThisId,
                    idJQueryLoader = "#" + loaderId,
                    idJQueryFailureId = "#" + failureId,
                    idJQuerySuccessId = "#" + successId;

            if (successId) {
                $("#" + successId).hide();
            }

            if (failureId) {
                $("#" + failureId).hide();
            }


            e.preventDefault(); @*  click on submit will not send the form , we overide it here  *@
            e.stopImmediatePropagation(); @*  only one handler will be invoked  *@



            @* following line is CRUCIAL - it will show validation error when form is submitted *@
            // following line is CRUCIAL - it will show validation error when form is submitted 
            if ($(form).valid()) {
                if (loaderId) {
                    console.log(name + " show loader");
                    $(idJQueryLoader).show();
                }
            }

            xmlHttp.open(form.method, form.action); @* use form action and method *@

            xmlHttp.onreadystatechange = function () {

                @*
                    readyState values :
                0 - request has not started
                1 - connected to the server
                2 - server has recived the request
                3 - server is processing
                4 - request is finished and data is ready

                    status values :
                    
                200 - OK
                400 - bad request
                500 - internal error

                *@
                console.log(" readyState : " + xmlHttp.readyState + " status : " + xmlHttp.status);
               
                

                if (xmlHttp.status == 200) {
                    if (xmlHttp.readyState == 4) {
                        // -- it is ok
                        console.log("Success !! ");

                        if (loaderId) {
                            console.log(name + " hide loader");
                            $(idJQueryLoader).hide();
                        }

                        if (addAfterThisId) {
                            $(idJQueryAfter).after(xmlHttp.responseText);
                        }


                        if (successId) {
                            $(idJQuerySuccessId).show();
                            $(idJQuerySuccessId).html(successMessage);
                        }
                    }
                } else {
                    // -- it is failure
                    if (loaderId) {
                        console.log(name + " hide loader");
                        $(idJQueryLoader).hide();
                    }

                    if (failureId) {
                        $(idJQueryFailureId).show();
                        $(idJQueryFailureId).html(failureMessage);
                    }
                    console.log("Error !! ");
                }
            }


            xmlHttp.send(new FormData(form)); @* send form data as part of ajax *@
        }

        function getScores() {
            var xmlHttp = new XMLHttpRequest();

            xmlHttp.onreadystatechange = function () {

                @*
                    readyState values :
                    0 - request has not started
                    1 - connected to the server
                    2 - server has recived the request
                    3 - server is processing
                    4 - request is finished and data is ready

                *@
                if ((xmlHttp.readyState == 4) && (xmlHttp.status == 200)) {
                    document.getElementById('scores').innerHTML = xmlHttp.responseText;
                } else {
                    document.getElementById('scores').innerHTML = "<strong>Waiting for server response ... </strong>";
                }
            }

            xmlHttp.open("GET", "/Test/AjaxRawJs");
            xmlHttp.send();
        }



    </script>
}


